package com.example.insolacaoterrestre;


import android.R.string;
import android.os.Bundle;
import android.view.View;
import android.app.Activity;
import android.widget.Button;
import android.widget.TextView;
import android.widget.EditText;
import java.text.DecimalFormat;
import android.view.View.OnClickListener;


public class InsolacaoTerrestreActivity extends Activity {

	boolean fCalcula;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_insolacao_terrestre);				
		
		Button button1 = (Button) findViewById(R.id.button1);
	   
		button1.setOnClickListener(new OnClickListener () {
			
			public void onClick (View arg0) {
	
			    try {
			    	execInsolacoTerrestre ();
				} catch (Exception e) {
					// TODO: handle exception
					Button btn = (Button) findViewById(R.id.button1);					
					btn.setError("Por favor, preencha os campos corretamente e obrigado");
				}  
			}
		}
		);
	}
	
	// Método Ajustar UTC
    private String utcToStr (double timeUTC) {

	   String utcStr;
       
       // Ajustar timeUTC
       if (Double.compare(timeUTC, 0.0)  >= 0) {
           utcStr = String.valueOf(timeUTC);

           if (utcStr.length() == 1) {
               utcStr = "+0" + utcStr;
           } else {
               utcStr = "+" + utcStr;
           }
       } else {
           utcStr = String.valueOf(Math.abs(timeUTC));

           if (utcStr.length() == 1) {
               utcStr = "-0" + utcStr;
           } else {
               utcStr = "-" + utcStr;
           }
       }

       return utcStr;
    }

    // Método verifica se o ano é bissesto
    private boolean bissesto (int a) {
	   
       boolean bissesto; //bi: logico
       int ac; //: inteiro
       
       if (a < 1){
          ac = a-1;
       }else{
          ac = a;
       }
      
       if ((((ac % 4) == 0) && ((ac % 100) != 0)) || ((ac % 400) == 0)) {
          bissesto = true;
       } else {
          bissesto = false;
       }
      
       return bissesto;
    }

    //Método converte o número referente ao mês em texto
    private String mesToStr (int m) {

       String str = "";

       switch (m){
	      case 1:
	          str = "janeiro";
	  		  break;
	      case 2:
		      str = "fevereiro";
		      break;
	      case 3:
		      str = "março";
		      break;
	      case 4:
		      str = "abril";
		      break;
	      case 5:
	          str = "maio";
		      break;
		  case 6:
	          str = "junho";
		      break;
		  case 7:
	          str = "julho";
		      break;
		  case 8:
	          str = "agosto";
		      break;
		  case 9:
		      str = "setembro";
		      break;
	      case 10:
		      str = "outubro";
		      break;
	      case 11:
		      str = "novembro";
		      break;
	      case 12:
		      str = "dezembro";
		      break;
       }

       return str;     
    }

    // Método que calcula o numero de dias corridos no ano
    private int diaDoAno(int d, int m, boolean bi){
   
       int dias;
       int diasAno[] = new int[12];

       diasAno[0]  = 0;
       diasAno[1]  = 31;
       diasAno[2]  = 59;
       diasAno[3]  = 90;
       diasAno[4]  = 120;
       diasAno[5]  = 151;
       diasAno[6]  = 181;
       diasAno[7]  = 212;
       diasAno[8]  = 243;
       diasAno[9]  = 273;
       diasAno[10] = 304;
       diasAno[11] = 334;

       if ((bi = true) && (m > 2)) {
          dias = diasAno[m-1] + d + 1;
	   } else {
	     dias = diasAno[m-1] + d;
	   }
      
       return dias;
    }

    // Método que informa quantos dias tem um determinado mês
    private int diasMes(int ms, boolean bi) {
	   
       int dias;
       int diasDoMes[] = new int[12];

       diasDoMes[0]  = 31;
       diasDoMes[1]  = 28;
       diasDoMes[2]  = 31;
       diasDoMes[3]  = 30;
       diasDoMes[4]  = 31;
       diasDoMes[5]  = 30;
       diasDoMes[6]  = 31;
       diasDoMes[7]  = 31;
       diasDoMes[8]  = 30;
       diasDoMes[9]  = 31;
       diasDoMes[10] = 30;
       diasDoMes[11] = 31;

       if ((bi = true) && (ms > 1)) {
          dias = diasDoMes[ms-1] + 1;
       } else {
          dias = diasDoMes[ms-1];
       }

       return dias;
    }

    // Método que converte grau, minuto e segundo em decimal
    private double gmsToDec(double g, double m, double s) {

       return g+m/60+(s/60)/60; 
    }

    // Método que converte a hora parrasda em decimal para hora, minuto e segundo
    private String timeToStr (double time) {

       String strHora, strMinuto, strSegundo;

       strHora = String.valueOf((int) time) + "h ";
       strMinuto = String.valueOf((int)((time-((int)time))*60)) + "min ";
       strSegundo = String.valueOf(((time-(int)time)*60-((int)((time-(int)time)*60)))*60);

       return strHora + strMinuto + strSegundo;      
    }
    
    // Método que plota o título do app na interface
    private void head(){
    	
    	//System.out.println("===========================================================");
        //System.out.println("                  INSOLAÇÂO TERRESTRE");
        //System.out.println("===========================================================");
    }

    // Método que plota o resultado para o usuário
    private void saida(int d, String m, int a, double hi, double ha, double hp, String sUTC) {
		
		final TextView editText13 = (TextView) findViewById(R.id.textView13);
		final TextView editText14 = (TextView) findViewById(R.id.textView14);
		final TextView editText15 = (TextView) findViewById(R.id.textView15);
		final TextView editText12 = (TextView) findViewById(R.id.textView12);
		
	    editText13.setText(String.valueOf("RESULTADO - INSOLAÇÃO TERRESTRE EM "+String.valueOf(d)+" DE "+m.toUpperCase()+" DE "+String.valueOf(a)+":"));
	    editText14.setText(String.valueOf("Duração prevista de "+timeToStr(hi)+";"));
	    editText15.setText(String.valueOf("Aurora prevista às "+timeToStr(ha)+" "+sUTC+" UTC;"));
	    editText12.setText(String.valueOf("Poente previsto às "+timeToStr(hp)+" "+sUTC+" UTC;"));
    }

    private int anoInput () {

    	int ano_;
        EditText editText1 = (EditText) findViewById(R.id.editText1);
        
	    try{
	        ano_ = Integer.parseInt(editText1.getText().toString()); // 2016
		    
		    if ((ano_ < -2418) || (ano_ > 5582)) {
		    	editText1.setError("O ano está fora da faixa!");
		    	fCalcula = false;
		    }
	    }catch (Exception e){
	    	editText1.setText("");
	    	editText1.setError("Preencha o ano, obrigado!");
	    	fCalcula = false;
	    	ano_ = 0;
	    }
	    
	    return ano_;	    
    }
    
    private int mesInput () {

    	int mes_;    	
    	EditText editText2 = (EditText) findViewById(R.id.editText2);
    	
    	try{
		    mes_ = Integer.parseInt(editText2.getText().toString()); // 2016
		    
		    if ((mes_ < 1) || (mes_ > 12)) {
		    	editText2.setError("O mês inserido não existe!");
		    	fCalcula = false;
		    }else{
		    	//faixaDia("Dia [1 a "+Integer.toString(diasMes(mes_, fBissesto_))+"]: ");
		    }
    	}catch (Exception e){
    		mes_=0;
    		editText2.setText("");
    		editText2.setError("Insira um mês, obrigado!");
	    	fCalcula = false;
    	}
    	
	    return mes_;	    
    }
    
    private int diaInput(int mes_, boolean fBissesto_){
    	
    	int dia_;
    	EditText editText3 = (EditText) findViewById(R.id.editText3);
    	
    	try{		    
		    dia_ = Integer.parseInt(editText3.getText().toString()); // 2016
		    
		    if ((dia_ < 1) || (dia_ > diasMes(mes_, fBissesto_))) {
		    	editText3.setError("Corrija o dia por favor!");
		    	fCalcula = false;
		    }
    	}catch (Exception e){
    		dia_= 0;
    		editText3.setText("");
    		editText3.setError("Digite o dia por favor!");
	    	fCalcula = false;
    	}
    	
	    return dia_;	    
    }
    
    private double latitudeGrausInput () { 
	    
    	double latitudeGraus_;
	    EditText editText4 = (EditText) findViewById(R.id.editText4);
	    
	    try{
		    latitudeGraus_ = Double.parseDouble(editText4.getText().toString());
		    
		    if ((latitudeGraus_ < -90) || (latitudeGraus_ > 90)) {
		    	editText4.setError("Corrija o grau da latitude por favor!");
		    	fCalcula = false;
		    }
	    }catch (Exception e){
	    	latitudeGraus_=0;
	    	editText4.setText("");
	    	editText4.setError("Digite o grau da latitude por favor!");
	    	fCalcula = false;
	    }
	    
	    return latitudeGraus_;	    
    }

    private double latitudeMinutosInput () {
	    
    	double latitudeMinutos_;
	    EditText editText5 = (EditText) findViewById(R.id.editText5);
    	
    	try{
		    latitudeMinutos_ = Double.parseDouble(editText5.getText().toString());
		    
		    if ((latitudeMinutos_ <= 0) || (latitudeMinutos_ >= 59)) {
		    	editText5.setError("Corrija o minuto da latitude por favor!");
		    	fCalcula = false;
		    }
    	}catch (Exception e){
    		latitudeMinutos_=0;
    		editText5.setText("");
    		editText5.setError("Digite o minuto da latitude por favor!");
    		fCalcula = false;
    	}
	    
	    return latitudeMinutos_;
    }
	
    private double latitudeSegundosInput(double latitudeGraus_, double latitudeMinutos_) {   
	
    	double latitudeSegundos_;
    	EditText editText6 = (EditText) findViewById(R.id.editText6);
    	
    	try{
		    latitudeSegundos_ = Double.parseDouble(editText6.getText().toString());
		    
		    if (((latitudeSegundos_ < 0) || (latitudeSegundos_ > 59)) || ((latitudeGraus_ == 0) &&
		    (latitudeMinutos_ == 0) && (latitudeSegundos_ == 0))) {
		    	editText6.setError("Corrija o segundo da latitude por favor!");
		    	fCalcula = false;
		    }
    	}catch (Exception e){
    		latitudeSegundos_=0;
    		editText6.setText("");
    		editText6.setError("Digite o segundo da latitude por favor!");
    		fCalcula = false;
    	}
    	
	    return latitudeSegundos_;    
    }
	
	private int UTCinput () {
	
		int UTC_;
		EditText editText7 = (EditText) findViewById(R.id.editText7);
		
		try{
		    UTC_ = Integer.parseInt(editText7.getText().toString()); // 2016
		    
		    if ((UTC_ < -12) && (UTC_ > 12)) {
		    	editText7.setError("Corrija o valor UTC do Fuso Horário por favor!");
		    	fCalcula = false;
		    }
		}catch (Exception e){
			UTC_=0;
			editText7.setText("");
			editText7.setError("Insira um valor UTC para o Fuso Horário por favor!");
			fCalcula = false;
		}
		
	    return UTC_;
    }    
    
    // Método de controle lógico do aplicativo
    private void execInsolacoTerrestre () {
       // Variáveis de Valores de Entrada
       int dia, mes, ano;
       double latitudeGraus, latitudeMinutos, latitudeSegundos, UTC;

       // Variáveis de valores internos
       double grausEquadorSolar, minutosEquadorSolar, segundosEquadorSolar;
       double equinocio;
       String mesStr, utcStr;

       // Variáveis de Valores Calculados Auxiliares
       boolean fBissesto;
       int diasAnoCivil, diasX;
       double equadorSolar, latitude;

       // Variáveis de Valores Calculados de Saída
       double horasDeInsolacao, HoraAurora, HoraPoente;
       
       
       // Comandos
      
       // Parâmetros Iniciais
       grausEquadorSolar = 23;
       minutosEquadorSolar = 27;
       segundosEquadorSolar = 0;
       equinocio = 284.5;

       dia = 0;
       mes = 0;
       ano = 0;

       latitudeGraus = 0;
       latitudeMinutos = 0;
       latitudeSegundos = 0;
       UTC = 0;

       mesStr = "";
       utcStr = "";

       fBissesto = false;
       diasAnoCivil = 0;
       diasX = 0;

       equadorSolar = 0;
       latitude = 0;

       horasDeInsolacao = 0;
       HoraAurora = 0;
       HoraPoente = 0;

       //encerrar = "";
       //sair = false;

       // Dados de Entrada do Usuário
       //head();
       fCalcula = true;
       
       ano = anoInput();
       fBissesto = bissesto(ano);
       mes = mesInput();
       dia = diaInput(mes, fBissesto);
       latitudeGraus = latitudeGrausInput();
       latitudeMinutos = latitudeMinutosInput();
       latitudeSegundos = latitudeSegundosInput(latitudeGraus, latitudeMinutos);
       UTC = UTCinput();
      
       // Indicação de hora local em relação a hora GMT, DST não está previsto
       utcStr = utcToStr(UTC);

       if (fCalcula == true){
    	   
	       // Ano Civil
	       if (fBissesto = true){
	          diasAnoCivil = 366;
		   } else {
			  diasAnoCivil = 365;
		   }
	
	       // Ajustar o Mês por Extenso
	       mesStr = mesToStr(mes);
	
	       // Conta dias no ano
	       diasX = diaDoAno(dia, mes, fBissesto);
	       
	       // Concatenar e Ajustar Valores
	       equadorSolar = gmsToDec(grausEquadorSolar, minutosEquadorSolar, segundosEquadorSolar);
	       latitude = gmsToDec(latitudeGraus, latitudeMinutos, latitudeSegundos);
	
	       // Ajuste da latitude para evitar error de divisão por zero na função
	       if (latitude == 0) { 
	          latitude = 0.000000001; // Valor suficiente para ser insignificante na ordem de grandeza nas dimenções para latitude terrestre
	       }
	       
	 
	       // Cálculos de Insolação, Auróra e Poente
	       horasDeInsolacao =  ((2.0 / 15.0) * Math.acos(-Math.tan(Math.PI / 180.0 * latitude) *
	               Math.tan(Math.PI / 180.0 * equadorSolar * Math.sin(Math.PI / 180.0 * (360.0 /
	               diasAnoCivil * (equinocio + diasX))))) * 180.0 / Math.PI);
	
	       HoraAurora = 12.0 - ((2.0 / 15.0) * Math.acos(-Math.tan(Math.PI / 180.0 * latitude) *
	               Math.tan(Math.PI / 180.0 * equadorSolar * Math.sin(Math.PI / 180.0 * (360.0 /
	               diasAnoCivil * (equinocio + diasX))))) * 180.0 / Math.PI) / 2.0;
	
	       HoraPoente = 12.0 + ((2.0 / 15.0) * Math.acos(-Math.tan(Math.PI / 180.0 * latitude) *
	               Math.tan(Math.PI / 180.0 * equadorSolar * Math.sin(Math.PI / 180.0 * (360.0 /
	               diasAnoCivil * (equinocio + diasX))))) * 180.0 / Math.PI) / 2.0;
	       
	       // Saida
	       saida(dia, mesStr, ano, horasDeInsolacao, HoraAurora, HoraPoente, utcStr);
       
       }else{
    	   //.setError("Por favor, preencha os campos corretamente e obrigado");
       }
   }
}
